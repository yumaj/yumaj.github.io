<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Codeforces 540C Ice Cave</title>
    <link href="/2020/06/02/Codeforces-540C-Ice-Cave/"/>
    <url>/2020/06/02/Codeforces-540C-Ice-Cave/</url>
    
    <content type="html"><![CDATA[<p>Use BFS to travel graph and find a path to endpoint, if the endpoint not ‘X’, need two path.</p><p><a href="'https://medium.com/@yumaj/codeforces-540c-ice-cave-8e0f7a7d4468'">problem link</a></p><hr><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span> <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>; <span class="hljs-keyword">int</span> sr,sc, er, ec; <span class="hljs-keyword">int</span> dirrow[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;; <span class="hljs-keyword">int</span> dircol[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>&#125;; <span class="hljs-keyword">int</span> n, m , k ; <span class="hljs-keyword">int</span> delcount; <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j,<span class="hljs-keyword">char</span> maze[][<span class="hljs-number">502</span>],<span class="hljs-keyword">int</span> used[][<span class="hljs-number">502</span>])</span></span><span class="hljs-function"> </span>&#123;     <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span> || i &gt;= n ||j &lt; <span class="hljs-number">0</span>  || j &gt;= m )<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;      <span class="hljs-keyword">if</span>(i == er<span class="hljs-number">-1</span> &amp;&amp; j == ec<span class="hljs-number">-1</span> &amp;&amp; maze[i][j] == <span class="hljs-string">'X'</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;     <span class="hljs-keyword">if</span>(maze[i][j] == <span class="hljs-string">'X'</span>)     &#123;         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;     &#125;     <span class="hljs-keyword">else</span>      &#123;         <span class="hljs-keyword">int</span> findpath = <span class="hljs-number">0</span>;         maze[i][j] = <span class="hljs-string">'X'</span>;         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> d = <span class="hljs-number">0</span> ; d &lt; <span class="hljs-number">4</span>; d++)         &#123;             <span class="hljs-keyword">int</span> newdirrow = i + dirrow[d];             <span class="hljs-keyword">int</span> newdircol = j + dircol[d];             <span class="hljs-keyword">if</span>(newdirrow &gt;= <span class="hljs-number">0</span> &amp;&amp; newdirrow &lt;  n &amp;&amp; newdircol &gt;=<span class="hljs-number">0</span>  &amp;&amp; newdircol &lt; m )              &#123;                 <span class="hljs-keyword">int</span> result = bfs(newdirrow,newdircol,maze,used);                 <span class="hljs-keyword">if</span>(result == <span class="hljs-number">1</span>)                 &#123;                     <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;                 &#125;             &#125;         &#125;         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;     &#125; &#125; <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"> </span>&#123;     <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;     <span class="hljs-keyword">char</span> maze[<span class="hljs-number">502</span>][<span class="hljs-number">502</span>];     <span class="hljs-keyword">int</span> used[<span class="hljs-number">502</span>][<span class="hljs-number">502</span>];     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)     &#123;         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)         &#123;             <span class="hljs-built_in">cin</span> &gt;&gt; maze[i][j];             used[i][j] = <span class="hljs-number">0</span>;         &#125;     &#125;     <span class="hljs-built_in">cin</span> &gt;&gt; sr &gt;&gt; sc &gt;&gt; er &gt;&gt; ec;     maze[sr <span class="hljs-number">-1</span>][sc - <span class="hljs-number">1</span>] = <span class="hljs-string">'.'</span>;     <span class="hljs-keyword">int</span> ans  = bfs(sr<span class="hljs-number">-1</span>,sc<span class="hljs-number">-1</span>,maze,used);     <span class="hljs-keyword">if</span>(ans == <span class="hljs-number">1</span>)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"YES"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;     <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"NO"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  &#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
